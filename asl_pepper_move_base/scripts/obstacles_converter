#!/usr/bin/env python
import rospy
from costmap_converter.msg import ObstacleArrayMsg, ObstacleMsg
from geometry_msgs.msg import Point32
from frame_msgs.msg import TrackedPersons


class ObstacleConverter(object):
    def __init__(self):
        rospy.init_node("obstacles_converter")
        self.kObstaclesTopic = "/move_base/TebLocalPlannerROS/obstacles"
        self.kTracksTopic = "/rwth_tracker/tracked_persons"
        self.kHumanRadius = rospy.get_param("/default_human_radius", 0.3)
        # subscribers
        rospy.Subscriber(self.kTracksTopic, TrackedPersons, self.tracked_persons_callback, queue_size=1)
        # publishers
        self.obstacles_pub = rospy.Publisher(self.kObstaclesTopic, ObstacleArrayMsg, queue_size=1)
        # let's go
        rospy.spin()

    def tracked_persons_callback(self, msg):
        obstacle_msg = ObstacleArrayMsg()
        obstacle_msg.header = msg.header
        for track in msg.tracks:
            obst = ObstacleMsg()
            obst.id = track.track_id
            point = Point32()
            point.x = track.pose.pose.position.x
            point.y = track.pose.pose.position.y
            point.z = track.pose.pose.position.z
            obst.polygon.points.append(point)
            obst.radius = self.kHumanRadius
            obst.orientation = track.pose.pose.orientation
            obst.velocities = track.twist
            obstacle_msg.obstacles.append(obst)
        self.obstacles_pub.publish(obstacle_msg)


if __name__ == "__main__":
    obstacles_converter = ObstacleConverter()

