#!/usr/bin/env python
from copy import deepcopy
from costmap_converter.msg import ObstacleArrayMsg, ObstacleMsg
from frame_msgs.msg import TrackedPersons
from geometry_msgs.msg import Twist, Quaternion
from geometry_msgs.msg import Point, Point32, Twist, PoseStamped
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from map2d_ros_tools import ReferenceMapAndLocalizationManager
import numpy as np
from nav_msgs.msg import Odometry, Path
from pose2d import Pose2D, apply_tf, apply_tf_to_pose, inverse_pose2d, apply_tf_to_vel, rotate
import rospy
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Trigger, TriggerResponse
import signal
import sys
import tf
from tf2_ros import TransformException
import threading
from timeit import default_timer as timer
from visualization_msgs.msg import Marker, MarkerArray
from CMap2D import CMap2D

N_PAST_POS = 100
HUMAN_RADIUS = 0.3 # according to Kenneth
DT = 0.1  # RVO simulation and resulting velocity trajectory resolution
CONTROLLER_ZOMBIE_TIMEOUT = 0.5  # how long should trajectories be followed before considered stale
JUMPSTART_AGENTS = True
VEL_MULT = 1.
VELOCITY_FIELD = True
INSCRIBED_RADIUS = None

SHOW_VERTICE_ORDERING = False
PLAN_EVEN_IF_STOPPED = False


class Planning(object):
    def __init__(self, args):
        self.args = args
        rospy.init_node('rvo_planner')
        # consts
        self.kLidarTopic = args.scan_topic
        self.kRobotRadius = rospy.get_param("~robot_radius", 0.3)
        self.kHumanRadius = HUMAN_RADIUS
        self.IDEAL_VELOCITY = rospy.get_param("~ideal_velocity", 0.4)
        self.MAX_VEL = rospy.get_param("~maximum_velocity", 0.4)
        self.kIdealVelocity = self.IDEAL_VELOCITY
        self.kFixedFrameTopic = "/pepper_robot/odom"
        self.kCmdVelTopic = "/cmd_vel"
        self.kWaypointTopic = "/global_planner/current_waypoint"
        self.kCombinedScanTopic = "/combined_scan"
        self.kTrackedPersonsTopic = "/rwth_tracker/tracked_persons"
        self.kStaticObstaclesTopic = "/close_nonleg_obstacles"
        self.kFixedFrame = rospy.get_param("~fixed_frame", "odom") # ideally something truly fixed, like /map
        self.kRobotFrame = "base_footprint"
        self.kMaxObstacleVel_ms = 10. # [m/s]
        self.kMapObstMaxDist = rospy.get_param("~static_obstacles_max_distance", 2.)
        print("Max static obstacle distance: {}m".format(self.kMapObstMaxDist))
        self.kWaypointRadius_m = 0.3
        # vars
        self.odom = None
        self.tf_rob_in_fix = None
        self.tf_wpt_in_fix = None
        self.hrz_in_fix = None
        self.lock = threading.Lock() # for avoiding race conditions
        self.tracked_persons_buffer = []
        self.transport_data = None
        self.STOP = True
        if args.no_stop:
            self.STOP = False
        self.vel_commands_in_rob = None
        self.laser_scan = None
        self.p2_scan_frame_in_fix = None
        # ROS
        rospy.Subscriber(self.kTrackedPersonsTopic, TrackedPersons, self.trackedpersons_callback, queue_size=1)
        rospy.Subscriber(self.kFixedFrameTopic, Odometry, self.odom_callback, queue_size=1)
        rospy.Subscriber(self.kWaypointTopic, Marker, self.waypoint_callback, queue_size=1)
        rospy.Subscriber(self.kCombinedScanTopic, LaserScan, self.scan_callback, queue_size=1)
        self.pubs = [rospy.Publisher("debug{}".format(i), LaserScan, queue_size=1) for i in range(3)]
        self.cmd_vel_pub = rospy.Publisher("/cmd_vel", Twist, queue_size=1)
        # tf
        self.tf_listener = tf.TransformListener()
        self.tf_br = tf.TransformBroadcaster()
        # Localization Manager
        mapname = rospy.get_param("~reference_map_name", "map")
        mapframe = rospy.get_param("~reference_map_frame", "reference_map")
        mapfolder = rospy.get_param("~reference_map_folder", "~/maps")
        mapdownsampling = rospy.get_param("~reference_map_downsampling_passes", 3)
        def refmap_update_callback(self_):
            self_.map_ds = self_.map_.as_coarse_map2d(mapdownsampling)
            self_.map_ds_as_closed_obstacles = self_.map_ds.as_closed_obst_vertices()
        self.refmap_manager = ReferenceMapAndLocalizationManager(mapfolder, mapname, mapframe, self.kFixedFrame, refmap_update_callback=refmap_update_callback)
        self.is_tracking_global_path = False
        # Timers
        rospy.Timer(rospy.Duration(0.01), self.tf_callback)
#         rospy.Timer(rospy.Duration(0.1), self.planner_routine)
        rospy.Timer(rospy.Duration(0.01), self.controller_routine)
        # Services
        rospy.Service('stop_autonomous_motion', Trigger, 
                self.stop_autonomous_motion_service_call)
        rospy.Service('resume_autonomous_motion', Trigger, 
                self.resume_autonomous_motion_service_call)
        # visuals 
        try:
            rate = rospy.Rate(10.)
#             self.visuals_loop()
            while True:
                self.planner_routine()
                rate.sleep()
        except KeyboardInterrupt:
            print("Keyboard interrupt - shutting down.")
            rospy.signal_shutdown('KeyboardInterrupt')

    def stop_autonomous_motion_service_call(self, req):
        with self.lock:
            if not self.STOP:
                print("Surrendering robot control")
                cmd_vel_msg = Twist()
                self.cmd_vel_pub.publish(cmd_vel_msg)
            self.STOP = True
        return TriggerResponse(True, "")

    def resume_autonomous_motion_service_call(self, req):
        with self.lock:
            if self.STOP:
                print("Assuming robot control")
                # re set goal
                if self.tf_rob_in_fix is None:
                    print("couldn't reset goal: tf_rob_in_fix not found yet")
                else:
                    self.tf_goal_in_fix = self.tf_rob_in_fix
                    print("rvo planner: waypoint set to current position (assumed control)")
            self.STOP = False
        return TriggerResponse(True, "")

    def visuals_loop(self):
        while True:
            # PLOT ---------------------------
            if self.transport_data is None:
                continue
            sim, agents, metadata, radii, obstacles, pred_tracks = self.transport_data 
            plt.figure("RVO")
            plt.cla()
            x = [sim.getAgentPosition(agent_no)[0] for agent_no in agents]
            y = [sim.getAgentPosition(agent_no)[1] for agent_no in agents]
            for i in range(len(agents)):
                color = "black"
                color = "green" if metadata[i]['source'] == 'robot' else color
                color = "red" if metadata[i]['source'] == 'dynamic' else color
                color = "blue" if metadata[i]['source'] == 'nonleg' else color
                circle = plt.Circle((x[i], y[i]), radii[i], facecolor=color)
                plt.gcf().gca().add_artist(circle)
                # track
                xx = np.array(pred_tracks[i])[:,0]
                yy = np.array(pred_tracks[i])[:,1]
                plt.plot(xx, yy, color=color)
            for vert in obstacles:
                plt.plot([v[0] for v in vert] + [vert[0][0]], [v[1] for v in vert] + [vert[0][1]])
            plt.axes().set_aspect('equal')
            plt.pause(0.1)
            # -----------------------------

    def scan_callback(self, msg):
        try:
            tf_msg_in_fix = self.tf_listener.lookupTransform(self.kFixedFrame, msg.header.frame_id, rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
            return
        self.laser_scan = msg
        self.p2_scan_frame_in_fix = Pose2D(tf_msg_in_fix)

    def odom_callback(self, msg):
        self.odom = msg

    def tf_callback(self, event=None):
        try:
             self.tf_rob_in_fix = self.tf_listener.lookupTransform(self.kFixedFrame, self.kRobotFrame, rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
            return

    def trackedpersons_callback(self, msg):
        # Add obstacles to buffer with their associated time
        with self.lock:
            self.tracked_persons_buffer.append(msg)
            if len(self.tracked_persons_buffer) > 5:
                self.tracked_persons_buffer = self.tracked_persons_buffer[-5:]


    # TODO
    # plan based on 
    # - slam map or reference map (refmap for now)
    # - -points- clusters of size > N closer than X in scan - which are not dynamic objects (N.I.Y)
    # - tracks not older than Y
    def planner_routine(self, event=None):
        nowstamp = rospy.Time.now()
        if self.tf_wpt_in_fix is None:
            rospy.logwarn_throttle(10., "Waypoint not available yet")
            return
        if self.tf_rob_in_fix is None:
            rospy.logwarn_throttle(10., "tf_rob_in_fix not available yet")
            return
        if self.odom is None:
            rospy.logwarn_throttle(10., "odom not available yet")
            return
        if self.STOP and not PLAN_EVEN_IF_STOPPED:
            return

        # remove old obstacles from buffer
        k2s = 2.
        with self.lock:
            tic = timer()
            self.tracked_persons_buffer = [msg for msg in self.tracked_persons_buffer
                    if nowstamp - msg.header.stamp < rospy.Duration(k2s)]
            tracks = []
            tracks_frame = self.kFixedFrame
            for tracks_msg in self.tracked_persons_buffer[-1:]:
                tracks_frame = tracks_msg.header.frame_id
                tracks.extend(tracks_msg.tracks)
            # vel to goal in fix
            goal_in_fix = np.array(Pose2D(self.tf_wpt_in_fix)[:2])
            horizon_in_fix = self.hrz_in_fix
            toc = timer()
            if self.args.hz:
                rospy.loginfo("Lock preproc {:.1f} ms".format( (toc-tic) * 1000. ))
            # robot position
            tf_rob_in_fix = self.tf_rob_in_fix
        pose2d_rob_in_fix = Pose2D(tf_rob_in_fix)
        pose2d_fix_in_rob = inverse_pose2d(pose2d_rob_in_fix)

        # check if goal is reached
        goal_in_rob = apply_tf(goal_in_fix, pose2d_fix_in_rob)
        if np.linalg.norm(goal_in_rob) <= self.kRobotRadius:
            return

        # get transform for message frame
        try:
             tf_msg_in_fix = self.tf_listener.lookupTransform(self.kFixedFrame, tracks_frame, rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException) as e:
            rospy.logwarn_throttle(10., "tf_msg_in_fix not available yet")
            return
        p2_msg_in_fix = Pose2D(tf_msg_in_fix)

        tic = timer()

        # RVO set up
        positions = []
        radii = []
        velocities = []
        obstacles = []
        metadata = [] # agent metadata

        # create agents for RVO
        # first agent is the robot
        robot_index = 0
        positions.append(pose2d_rob_in_fix[:2])
        radii.append(self.kRobotRadius)
        velocities.append([self.odom.twist.twist.linear.x, self.odom.twist.twist.linear.y])
        metadata.append({'source': 'robot'})
        # create agent for every dynamic obstacle
        for track in tracks:
            # transforms
            pose = [track.pose.pose.position.x, track.pose.pose.position.y]
            pose_in_fix = apply_tf(np.array([pose]), p2_msg_in_fix)[0]
            vel = [track.twist.twist.linear.x, track.twist.twist.linear.y, 0]
            vel_in_fix = apply_tf_to_vel(np.array(vel), p2_msg_in_fix)
            # add to simulator
            vel_norm = np.linalg.norm(vel_in_fix)
            if JUMPSTART_AGENTS and vel_norm > 0.1:
                p = pose_in_fix[:2]
                vdirection = vel_in_fix[:2] / vel_norm
                pplus = p + vdirection * self.kHumanRadius * 2.5
                # plus
                positions.append(pplus)
                radii.append(self.kHumanRadius)
                velocities.append(vel_in_fix[:2])
                metadata.append({'source': 'dynamic'})
            else:
                positions.append(pose_in_fix)
                radii.append(self.kHumanRadius)
                velocities.append(vel_in_fix[:2])
                metadata.append({'source': 'dynamic'})

        # create static obstacle vertices from refmap if available (walls, etc)
        velocity_field = None
        if self.laser_scan is not None:
            max_dist = self.kMapObstMaxDist * 2.
            rectangle_around_sensor = np.array([[-max_dist, max_dist],
                                                [-max_dist, max_dist]],
                                               dtype=np.float32)
            tic = timer()
            scan_as_map = CMap2D()
            scan_as_map.from_scan(
                self.laser_scan, resolution=0.05,
                limits=rectangle_around_sensor, inscribed_radius=INSCRIBED_RADIUS)
            pose2d_scan_in_fix = self.p2_scan_frame_in_fix
            obstacles_in_scan = scan_as_map.as_closed_obst_vertices()
            obstacles_in_fix = [apply_tf(vertices, pose2d_scan_in_fix) for vertices in obstacles_in_scan 
                                if len(vertices) > 0]
            obstacles = obstacles_in_fix
            toc = timer()
            if self.args.hz:
                print("lidar to vertices: {}s".format(toc-tic))
            if VELOCITY_FIELD:
                tic = timer()
                coarse_scan_as_map = CMap2D()
                coarse_scan_as_map.from_scan(
                    self.laser_scan, resolution=0.1,
                    limits=rectangle_around_sensor, inscribed_radius=INSCRIBED_RADIUS)
                pose2d_fix_in_scan = inverse_pose2d(pose2d_scan_in_fix)
                goal_in_scan = apply_tf(goal_in_fix, pose2d_fix_in_scan)
                goal_ij_in_scan = coarse_scan_as_map.xy_to_ij([goal_in_scan])[0]
                sdf = coarse_scan_as_map.as_sdf()
                RR = 0.7  # at this distance speed is capped to 1.
                speeds = np.clip((sdf/RR)**2, 0.1, 1.)
                velocity_field = coarse_scan_as_map.fastmarch(
                    goal_ij_in_scan,
                    speeds=speeds,
                    mask=(sdf < self.kRobotRadius).astype(np.uint8))
                toc = timer()
                if self.args.hz:
                    print("Velocity field: {}s".format(toc-tic))
                if False:
                    from CMap2D import gridshow, path_from_dijkstra_field
                    from pyniel.pyplot_tools.colormaps import Greys_c10
                    rob_ij = coarse_scan_as_map.xy_to_ij([apply_tf(pose2d_rob_in_fix[:2], pose2d_fix_in_scan)])[0]
                    path8, _ = path_from_dijkstra_field(velocity_field, rob_ij, connectedness= 8)
                    directions = np.array([coarse_scan_as_map.direction_in_field(p, velocity_field)
                                           for p in path8])
                    plt.ion()
                    plt.figure("velocity field")
                    plt.cla()
                    gridshow(speeds, cmap=plt.cm.Greys)
                    plt.quiver(path8[:,0],  path8[:,1], directions[:,0], directions[:,1], color='red')
                    plt.pause(0.1)
                if True:
                    from nav_msgs.msg import OccupancyGrid
                    pub = rospy.Publisher("/rvo_planner/speed_field", OccupancyGrid, queue_size=1)
                    grid_msg = coarse_scan_as_map.numpy_to_occupancy_grid_msg(
                        speeds, self.laser_scan.header.frame_id, self.laser_scan.header.stamp)
                    pub.publish(grid_msg)


        elif self.refmap_manager.tf_frame_in_refmap is not None and self.refmap_manager.map_ is not None:
            obstacles_in_ref = self.refmap_manager.map_ds_as_closed_obstacles
            pose2d_ref_in_fix = inverse_pose2d(Pose2D(self.refmap_manager.tf_frame_in_refmap))
            obstacles_in_fix = [apply_tf(vertices, pose2d_ref_in_fix) for vertices in obstacles_in_ref 
                              if len(vertices) > 1]
            near_obstacles = [np.vstack((vertices, vertices[0])) for vertices in obstacles_in_fix 
                              if np.min(np.linalg.norm(
                                  vertices - np.array(positions[0]), axis=1)) < self.kMapObstMaxDist]
            obstacles = near_obstacles
        if obstacles:
            pub = rospy.Publisher("/rvo_planner/debug/static_obstacles", MarkerArray, queue_size=1)
            ma = MarkerArray()
            for i in range(len(obstacles)):
                color = (1,0,0,1) # red
                # track line
                mk = Marker()
                mk.lifetime = rospy.Duration(0.1)
                mk.header.frame_id = self.kFixedFrame
                mk.ns = "obstacles"
                mk.id = i
                mk.type = 4 # LINE_STRIP
                mk.action = 0
                mk.scale.x = 0.02
                mk.color.r = color[0]
                mk.color.g = color[1]
                mk.color.b = color[2]
                mk.color.a = color[3]
                mk.frame_locked = True
                v = 0
                for vertice in obstacles[i]:
                    v += 0.01
                    pt = Point()
                    pt.x = vertice[0]
                    pt.y = vertice[1]
                    pt.z = v if SHOW_VERTICE_ORDERING else 0
                    mk.points.append(pt)
                ma.markers.append(mk)
            pub.publish(ma)
        else:
            rospy.logwarn("No obstacles")


        toc = timer()
        if self.args.hz:
            rospy.loginfo("Pre-RVO {:.1f} ms".format( (toc-tic) * 1000. ))
        tic = timer()

        # RVO ----------------
        import rvo2
        t_horizon = 10.
        #RVOSimulator(timeStep, neighborDist, maxNeighbors, timeHorizon, timeHorizonObst, radius, maxSpeed, velocity = [0,0]);
        sim = rvo2.PyRVOSimulator(DT, 1.5, 5, 1.5, 2, 0.4, 2)

        # Pass either just the position (the other parameters then use
        # the default values passed to the PyRVOSimulator constructor),
        # or pass all available parameters.
        agents = []
        for p, v, r, m in zip(positions, velocities, radii, metadata):
            #addAgent(posxy, neighborDist, maxNeighbors, timeHorizon, timeHorizonObst, radius, maxSpeed, velocity = [0,0]);
            a = sim.addAgent(tuple(p), radius=r, velocity=tuple(v))
            agents.append(a)
            # static agents can't move
            if m['source'] == 'static':
                sim.setAgentMaxSpeed(a, 0)

        # Obstacle(list of vertices), anticlockwise (clockwise for bounding obstacle)
        for vert in obstacles:
            o1 = sim.addObstacle(list(vert))
        sim.processObstacles()

        toc = timer()
        if self.args.hz:
            rospy.loginfo("RVO init {:.1f} ms".format( (toc-tic) * 1000. ))
        tic = timer()

        n_steps = int(t_horizon / DT)
        pred_tracks = [[] for a in agents]
        pred_vels = [[] for a in agents]
        pred_t = []
        nav_horizon_active = False
        pred_wpt_in_fix = None
        for step in range(n_steps):
            for i in range(len(agents)):
                # TODO: early stop if agent 0 reaches goal
                a = agents[i]
                pref_vel = velocities[i] # assume agents want to keep initial vel
                if i == robot_index:
                    pos = np.array(sim.getAgentPosition(a))
                    vector_to_goal = goal_in_fix - pos
                    dtg = np.linalg.norm(vector_to_goal)
                    # switch to horizon if waypoint is reached
                    if horizon_in_fix is not None:
                        vector_to_horizon = horizon_in_fix - pos
                        if nav_horizon_active:
                            vector_to_goal = vector_to_horizon
                        elif dtg <= (self.kRobotRadius + self.kWaypointRadius_m):
                            nav_horizon_active = True
                            pred_wpt_in_fix = pos
                    # set ideal velocity
                    pref_vel = self.kIdealVelocity * vector_to_goal / dtg
                    # plan around obstacles with dijsktra
                    if velocity_field is not None and not nav_horizon_active:
                        pos_in_scan = apply_tf(pos, pose2d_fix_in_scan)
                        pos_ij_in_scan = coarse_scan_as_map.xy_to_ij([pos_in_scan])[0]
                        direction = coarse_scan_as_map.direction_in_field(pos_ij_in_scan,
                                                                   velocity_field)
                        direction = np.concatenate([direction, [0.]])
                        direction_in_fix = apply_tf_to_vel(direction, pose2d_scan_in_fix)
                        if direction[0] != 0 or direction[1] != 0:
                            pref_vel = self.kIdealVelocity * direction_in_fix
                sim.setAgentPrefVelocity(a, tuple(pref_vel))
                pred_tracks[i].append(sim.getAgentPosition(a))
                pred_vels[i].append(sim.getAgentVelocity(a))
            pred_t.append(1. *step * DT)
            sim.doStep()
        # -------------------------
        toc = timer()
        if self.args.hz:
            rospy.loginfo("RVO steps {} - {} agents - {} obstacles".format(step, len(agents), len(obstacles)))
            rospy.loginfo("RVO sim {:.1f} ms".format( (toc-tic) * 1000. ))


        # PLOT ---------------------------
#         self.transport_data = (sim, agents, metadata, radii, obstacles, pred_tracks)
        # -----------------------------

        # publish predicted tracks as paths
        rob_track = pred_tracks[robot_index]
        pub = rospy.Publisher("/rvo_robot_plan", Path, queue_size=1)
        path_msg = Path()
        path_msg.header.stamp = nowstamp
        path_msg.header.frame_id = self.kFixedFrame
        for pose, t in zip(rob_track, pred_t):
            pose_msg = PoseStamped()
            pose_msg.header.stamp = nowstamp + rospy.Duration(t)
            pose_msg.header.frame_id = path_msg.header.frame_id
            pose_msg.pose.position.x = pose[0]
            pose_msg.pose.position.y = pose[1]
            path_msg.poses.append(pose_msg)
        pub.publish(path_msg)

        # publish tracks
        pub = rospy.Publisher("/rvo_simulated_tracks", MarkerArray, queue_size=1)
        ma = MarkerArray()
        id_ = 0
        end_x = [sim.getAgentPosition(agent_no)[0] for agent_no in agents]
        end_y = [sim.getAgentPosition(agent_no)[1] for agent_no in agents]
        end_t = pred_t[-1]
        for i in range(len(agents)):
            color = (0,0,0,1) # black
            color = (1,.8,0,1) if metadata[i]['source'] == 'robot' else color # green
            color = (1,0,0,1) if metadata[i]['source'] == 'dynamic' else color # red
            color = (0,0,1,1) if metadata[i]['source'] == 'nonleg' else color # blue
            # track line
            mk = Marker()
            mk.lifetime = rospy.Duration(0.1)
            mk.header.frame_id = self.kFixedFrame
            mk.ns = "tracks"
            mk.id = i
            mk.type = 4 # LINE_STRIP
            mk.action = 0
            mk.scale.x = 0.02
            mk.color.r = color[0]
            mk.color.g = color[1]
            mk.color.b = color[2]
            mk.color.a = color[3]
            mk.frame_locked = True
            xx = np.array(pred_tracks[i])[:,0]
            yy = np.array(pred_tracks[i])[:,1]
            for x, y, t in zip(xx, yy, pred_t):
                pt = Point()
                pt.x = x
                pt.y = y
                pt.z = t / t_horizon
                mk.points.append(pt)
            ma.markers.append(mk)
            # endpoint
            r = radii[i]
            mk = Marker()
            mk.lifetime = rospy.Duration(0.1)
            mk.header.frame_id = self.kFixedFrame
            mk.ns = "endpoints"
            mk.id = i
            mk.type = 3 # CYLINDER
            mk.action = 0
            mk.scale.x = r * 2.
            mk.scale.y = r * 2.
            mk.scale.z = 0.1
            mk.color.r = color[0]
            mk.color.g = color[1]
            mk.color.b = color[2]
            mk.color.a = color[3]
            mk.frame_locked = True
            mk.pose.position.x = end_x[i]
            mk.pose.position.y = end_y[i]
            mk.pose.position.z = end_t / t_horizon
            ma.markers.append(mk)
        pub.publish(ma)


        # trajectory end
        pred_end_in_fix = np.array([end_x[robot_index], end_y[robot_index]])
        pred_end_in_rob = apply_tf(pred_end_in_fix, pose2d_fix_in_rob)

        # traj velocities in robot frame
        rob_vels = pred_vels[robot_index]
        rob_vels_in_fix = np.zeros((len(rob_vels), 3))  # 0 is robot index
        rob_vels_in_fix[:, :2] = np.array(rob_vels)
        rob_vels_in_rob = apply_tf_to_vel(rob_vels_in_fix, pose2d_fix_in_rob)

        # Slow turn towards goal (or waypoint)
        # proportional to angle so that after 2s robot is facing waypoint
        best_w = 0
        WMAX = 0.5
        TIME_TO_ROTATE = 2.
        gx, gy = pred_end_in_rob
        if pred_wpt_in_fix is not None:
            pred_wpt_in_rob = apply_tf(pred_wpt_in_fix, pose2d_fix_in_rob)
            gx, gy = pred_wpt_in_rob
        angle_to_goal = np.arctan2(gy, gx) # [-pi, pi]
        if np.sqrt(gx * gx + gy * gy) > 0.5: # turn only if goal is far away
            if np.abs(angle_to_goal) > (np.pi / 4/ 10): # deadzone
                best_w = np.clip(angle_to_goal / TIME_TO_ROTATE, -WMAX, WMAX)
        rob_vels_in_rob[:, 2] = best_w

        # correct velocity vector due to robot rotation
        th_integrated = - np.arange(len(rob_vels_in_rob)) * DT * best_w
        u = rob_vels_in_rob[:,0]
        v = rob_vels_in_rob[:,1]
        ur = u * np.cos(th_integrated) - v * np.sin(th_integrated)
        vr = u * np.sin(th_integrated) + v * np.cos(th_integrated)
        rob_vels_in_rob[:,0] = ur
        rob_vels_in_rob[:,1] = vr

        # remove first command (often is current robot vel)
        rob_vels_in_rob = rob_vels_in_rob[4:]

        # update trajectory for controller
        self.vel_commands_in_rob = rob_vels_in_rob

    def controller_routine(self, event=None):
        """ Execute RVO trajectory using open loop controller in separate thread """
        # pop trajectory if available
        with self.lock:
            vel_commands_in_rob = self.vel_commands_in_rob
            self.vel_commands_in_rob = None
        if vel_commands_in_rob is None:
            return
        # execute trajectory unless a new one is requested
        for i in range(len(vel_commands_in_rob)):
            # check if trajectory is stale
            if (i * DT) >= CONTROLLER_ZOMBIE_TIMEOUT:
                cmd_vel_msg = Twist()
                rospy.logwarn("Reached controller zombie timeout")
                cmd_vel_msg.linear.x = 0
                cmd_vel_msg.linear.y = 0
                cmd_vel_msg.angular.z = 0
                self.cmd_vel_pub.publish(cmd_vel_msg)
                return
            # send current trajectory
            with self.lock:
                STOP = self.STOP
            if not STOP:
                vel_x = vel_commands_in_rob[i, 0] * VEL_MULT
                vel_y = vel_commands_in_rob[i, 1] * VEL_MULT
                vel_norm = np.sqrt(vel_x**2 + vel_y**2)
                if vel_norm > self.MAX_VEL:
                    vel_x = vel_x / vel_norm * self.MAX_VEL
                    vel_y = vel_y / vel_norm * self.MAX_VEL
                # publish cmd_vel
                cmd_vel_msg = Twist()
                cmd_vel_msg.linear.x = vel_x
                cmd_vel_msg.linear.y = vel_y
                cmd_vel_msg.angular.z = vel_commands_in_rob[i, 2] * VEL_MULT
                self.cmd_vel_pub.publish(cmd_vel_msg)
            # sleep for DT
            rospy.sleep(DT)
            # check if a newer trajectory is available
            with self.lock:
                if self.vel_commands_in_rob is not None:
                    return

    def waypoint_callback(self, msg):
        self.tf_timeout = rospy.Duration(0.1)
        """ If a global path is received (in map frame), try to track it """
        with self.lock:
            msg_frame = msg.header.frame_id
            wpt_msg_xy = [msg.pose.position.x, msg.pose.position.y]
            time = msg.header.stamp
            try:
                time = msg.header.stamp - rospy.Duration(0.5)
            except TypeError:  # "time values must be positive"
                pass
            try:
                # had to add otherwise ROS complains about interpolation in the future
                tf_info = [self.kFixedFrame, msg.header.frame_id, time]
                self.tf_listener.waitForTransform(*(tf_info + [self.tf_timeout]))
                tf_msg_in_fix = self.tf_listener.lookupTransform(*tf_info)
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException,
                    TransformException) as e:
                rospy.logwarn_throttle(10.,"[{}.{}] tf to msgmap frame for time {}.{} not found: {}".format(
                    rospy.Time.now().secs, rospy.Time.now().nsecs, time.secs, time.nsecs, e))
                return
            p2d_msg_in_fix = Pose2D(tf_msg_in_fix)
            wpt_fix_xy = apply_tf(np.array(wpt_msg_xy), p2d_msg_in_fix)
            self.tf_wpt_in_fix = (np.array([wpt_fix_xy[0], wpt_fix_xy[1], 0.]), # trans
                                   tf.transformations.quaternion_from_euler(0,0,0)) # quat
            self.hrz_in_fix = None
            if msg.points:
                horizon = msg.points[-1]
                self.hrz_in_fix = apply_tf(np.array([horizon.x, horizon.y]), p2d_msg_in_fix)
            # tricks to make say planner more useful in the presence of people
            if msg.text == "Say":
                self.kHumanRadius = 0.5 * HUMAN_RADIUS
                self.kIdealVelocity = 0.75 * self.IDEAL_VELOCITY
            else:
                self.kHumanRadius = HUMAN_RADIUS
                self.kIdealVelocity = self.IDEAL_VELOCITY


def parse_args():
    import argparse
    ## Arguments
    parser = argparse.ArgumentParser(description='ROS node for clustering 2d lidar')
    parser.add_argument('--hz',
            action='store_true',
            help='if set, prints planner frequency to script output',
            )
    parser.add_argument('--no-stop', action='store_true',
                        help='DANGER: if set, does not wait for control handover',)
    parser.add_argument('--scan-topic', default="/combined_scan")
    ARGS, unknown_args = parser.parse_known_args()

    # deal with unknown arguments
    # ROS appends some weird args, ignore those, but not the rest
    if unknown_args:
        non_ros_unknown_args = rospy.myargv(unknown_args)
        if non_ros_unknown_args:
            print("unknown arguments:")
            print(non_ros_unknown_args)
            parser.parse_args(args=["--help"])
            raise ValueError
    return ARGS

if __name__=="__main__":
    args = parse_args()
    clustering = Planning(args)

